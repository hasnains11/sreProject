/*
 * Copyright 2012, 2017 INFN
 *
 * Licensed under the EUPL, Version 1.2 or â€“ as soon they
 * will be approved by the European Commission - subsequent
 * versions of the EUPL (the "Licence");
 * You may not use this work except in compliance with the
 * Licence.
 * You may obtain a copy of the Licence at:
 *
 * https://joinup.ec.europa.eu/software/page/eupl
 *
 * Unless required by applicable law or agreed to in
 * writing, software distributed under the Licence is
 * distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied.
 * See the Licence for the specific language governing
 * permissions and limitations under the Licence.
 */

#ifndef __CHAOSFramework__DirectIOSystemAPIClientChannel__
#define __CHAOSFramework__DirectIOSystemAPIClientChannel__

#include <string>
#include <stdint.h>
#include <chaos/common/utility/ObjectFactoryRegister.h>
#include <chaos/common/data/CDataWrapper.h>
#include <chaos/common/direct_io/channel/DirectIODeviceChannelGlobal.h>
#include <chaos/common/direct_io/channel/DirectIOVirtualClientChannel.h>

namespace chaos_data = chaos::common::data;

namespace chaos {
	namespace common {
		namespace direct_io {
			namespace channel {

				using namespace chaos::common::direct_io::channel::opcode_headers;
				//! System API client channel
				DECLARE_CLASS_FACTORY(DirectIOSystemAPIClientChannel, DirectIOVirtualClientChannel) {
					REGISTER_AND_DEFINE_DERIVED_CLASS_FACTORY_HELPER(DirectIOSystemAPIClientChannel)
					friend class DirectIODispatcher;
					
					DirectIOSystemAPIClientChannel(std::string alias);
					~DirectIOSystemAPIClientChannel();
				public:
                    int echo(chaos::common::data::BufferSPtr message,
                             chaos::common::data::BufferSPtr& echo_message);
                    
					//! get the snapshot for one or more producer key
					/*!
					 Retrieve the dataset form the snapshot for one or more producer key.
					 Is possible to decide the type of the snapshot to get
					 \param snapshot_name the name of the snapshot to delete
					 \param channel_type the type of the channel [0-output, 1-input, 2-custom, 3-system]]
					 \param producer_key the key of the producer for wich return the datasets
					 */
					int getDatasetSnapshotForProducerKey(const std::string& snapshot_name,
															 const std::string& producer_key,
															 uint32_t channel_type,
															 DirectIOSystemAPIGetDatasetSnapshotResult& api_result_handle);
                    
                    //! push on data service the log entries generated by a determinated node
                    int pushLogEntries(const std::string& node_name,
                                           const ChaosStringVector& log_entries);
				};
			}
		}
	}
}
#endif /* defined(__CHAOSFramework__DirectIOSystemAPIClientChannel__) */
