cmake_minimum_required(VERSION 2.8)
MESSAGE("ALEDEBUG CALLED CMakeChaosWIN")
#include(${CMAKE_CURRENT_LIST_DIR}/CMakeMacroUtilsWin.txt)
macro (MESG parm)
  SET(WHERE ${CMAKE_CURRENT_LIST_DIR})
  MESSAGE(STATUS "[${WHERE}] ${parm}")
endmacro()
#unreferenced local variable 
add_definitions(-wd"4101")
#macro redefinition 
add_definitions(-wd"4005")
#removing warnings for not safe function (as sprintf sscanf etc)
add_definitions(-D_CRT_SECURE_NO_WARNINGS)

### options and configuration variables ####

IF(NOT CHAOS_VERSION_MAJOR)
	 SET(CHAOS_VERSION_MAJOR "1")
ENDIF()
IF(NOT CHAOS_VERSION_MINOR)
	 SET(CHAOS_VERSION_MINOR "1")
ENDIF()
IF(NOT CHAOS_BUILD_ID)
	 SET(CHAOS_BUILD_ID 666)
ENDIF()



if((CMAKE_BUILD_TYPE MATCHES DEBUG) OR (CMAKE_BUILD_TYPE MATCHES Debug))
  set(CHAOS_DEBUG ON)
  MESG("ENABLING DEBUG on ${PROJECT_NAME}")
 
ENDIF()

if((CMAKE_BUILD_TYPE MATCHES Release) OR (CMAKE_BUILD_TYPE MATCHES RELEASE))
  MESG("ENABLING RELEASE on ${PROJECT_NAME}")
#  set (CHAOS_CXX_FLAGS "${CHAOS_CXX_FLAGS} -O3")
#  set (CHAOS_C_FLAGS "${CHAOS_C_FLAGS} -O3")
ENDIF()


if (CHAOS_DEBUG)
  MESG("Enable debug mode")
  set (CHAOS_CXX_FLAGS "${CHAOS_CXX_FLAGS} -DDEBUG")
  set (CHAOS_C_FLAGS "${CHAOS_C_FLAGS} -DDEBUG")
ENDIF()



EXECUTE_PROCESS(COMMAND uname -s OUTPUT_VARIABLE CHAOS_SYSTEM_NAME)
EXECUTE_PROCESS(COMMAND uname -m OUTPUT_VARIABLE CHAOS_SYSTEM_MACHINE)
STRING(REPLACE "\n" "" CHAOS_SYSTEM_NAME ${CHAOS_SYSTEM_NAME})
STRING(REPLACE "\n" "" CHAOS_SYSTEM_MACHINE ${CHAOS_SYSTEM_MACHINE})
MESG("ALEDEBUG SYSTEM  ${CHAOS_SYSTEM_NAME}")
MESG("ALEDEBUG MACHINE  ${CHAOS_SYSTEM_MACHINE}")




  
  
  IF(CHAOS_STATIC)
  MESG("Enabling Static compilation")
  SET(BUILD_FORCE_STATIC 1)
  SET(CMAKE_FIND_LIBRARY_SUFFIXES ".lib")
  ADD_DEFINITIONS(-DCHAOS_STATIC)
  #SET(CHAOS_LINKER_FLAGS "-static")
  #SET(CMAKE_EXE_LINKER_FLAGS "-static")
  SET(BUILD_SHARED_LIBRARIES OFF)
  #SET(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS)
  #SET(CMAKE_SHARED_LIBRARY_LINK_CC_FLAGS)
  #set(CMAKE_EXE_LINK_DYNAMIC_C_FLAGS)       # remove -Wl,-Bdynamic
  #set(CMAKE_EXE_LINK_DYNAMIC_CXX_FLAGS)
ELSE()
  SET(BUILD_SHARED_LIBRARIES ON)
ENDIF()

#set (CMAKE_EXE_LINKER_FLAGS ${CHAOS_LINKER_FLAGS} CACHE STRING "Linker flags")


MESSAGE("ALEDEBUG CMAKE_BINARY_DIR" ${CMAKE_BINARY_DIR})
#SET(EXTERNAL_BUILD_DIR ${CMAKE_CURRENT_LIST_DIR}/../external-${CHAOS_POSTFIX})
#set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build-${CHAOS_POSTFIX})
#set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build-${CHAOS_POSTFIX})
#set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build-${CHAOS_POSTFIX})

######

#### TOOL VERSIONS
#if( CHAOS_BOOST_VERSION)
#  SET(BOOST_VERSION ${CHAOS_BOOST_VERSION})
#  SET(BOOST_MINOR_VERSION ${CHAOS_BOOST_MINOR_VERSION})
#ELSE()
#  SET(BOOST_VERSION 64)
#  SET(BOOST_MINOR_VERSION 0)
#ENDIF()




INCLUDE_DIRECTORIES(. ${PROJECT_SOURCE_DIR} ${CMAKE_INSTALL_PREFIX}/include)
LINK_DIRECTORIES(${CMAKE_LIBRARY_OUTPUT_DIRECTORY} ${CMAKE_INSTALL_PREFIX}/lib)



SET(CMAKE_PREFIX_PATH ${CMAKE_INSTALL_PREFIX} )
SET(CMAKE_LIBRARY_PATH ${CMAKE_INSTALL_PREFIX}/lib)
SET(CMAKE_FRAMEWORK_PATH ${CMAKE_LIBRARY_PATH})

MESG("Chaos Generic settings dir ${CMAKE_CURRENT_SOURCE_DIR} CHAOS_FRAMEWORK: ${CHAOS_FRAMEWORK} on ${PROJECT_NAME}")
MESG("Host System      : ${CHAOS_SYSTEM_NAME}-${CHAOS_SYSTEM_MACHINE}")
MESG("Installation Dir : ${CMAKE_INSTALL_PREFIX}")
MESG("CXX compiler     : ${CMAKE_CXX_COMPILER}")
MESG("CXX Flags        : ${CHAOS_CXX_FLAGS}")
MESG("C compiler       : ${CMAKE_C_COMPILER}")
MESG("C Flags          : ${CHAOS_C_FLAGS}")
MESG("Linker Flags     : ${CHAOS_LINKER_FLAGS}")
MESG("Parallel build   : ${PROCESSOR_COUNT}")
MESG("Framework libs   : ${FrameworkLib}")
MESG("BUILD TYPE:${CMAKE_BUILD_TYPE}")

 if(NOT EXISTS "${CMAKE_INSTALL_PREFIX}")
  FILE(MAKE_DIRECTORY ${CMAKE_INSTALL_PREFIX})
 ENDIF()
 set (GIT_VERSION_STRING "2.18.0")

 set(WINGENERAL "General")
 set (WINCOMMONBUILDLIBPATH "${CMAKE_BINARY_DIR}/chaos/common")
set(WINTOOLKIT "")
set(WINCOMMON "")
set(WINMDS "")

 FILE(COPY ${CMAKE_CURRENT_LIST_DIR}/Findchaos.cmake DESTINATION ${CMAKE_INSTALL_PREFIX}/)
 FILE(COPY ${CMAKE_CURRENT_LIST_DIR}/CMakeMacroUtilsWin.txt DESTINATION ${CMAKE_INSTALL_PREFIX}/)
